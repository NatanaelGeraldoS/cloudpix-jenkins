services:
    # For the Backend we will use port 5001, and we will use the environment file .env.production.backend
    # We will use the Datadog for the data check and we will check the healt for the port http://localhost:5001/healthz
    backend:
        ports:
            - "5001:5000"
        image: ${BACKEND_IMAGE}:${IMAGE_TAG}
        env_file:
            - .env.production.backend
        environment:
            - NODE_ENV=production
            - DD_ENV=production
            - DD_SERVICE=cloudpix-backend
            - DD_VERSION=${IMAGE_TAG}
        expose:
            - "5000"
        restart: unless-stopped
        labels:
            com.datadoghq.ad.check_names: '["http_check"]'
            com.datadoghq.ad.init_configs: "[{}]"
            com.datadoghq.ad.instances: >
                [
                { "name":"backend-health", "url":"http://localhost:5001/healthz", "timeout":2 }
                ]
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -fsS http://localhost:5001/healthz || exit 1",
                ]
            interval: 30s
            timeout: 10s
            retries: 3
    # For the Frontend we will depends on the backend image, and will use port 80:80
    # We will use the Datadog also as the metric and data visualization for the log
    frontend:
        image: ${FRONTEND_IMAGE}:${IMAGE_TAG}
        depends_on:
            - backend
        ports:
            - "80:80"
        restart: unless-stopped
        environment:
            - DD_ENV=production
            - DD_SERVICE=cloudpix-frontend
            - DD_VERSION=${IMAGE_TAG}
    # For the datadog, we will use the DD_API_KEY that we already store it on the .env.production file
    datadog:
        image: gcr.io/datadoghq/agent:7
        restart: unless-stopped
        env_file:
            - .env.production
        environment:
            - DD_API_KEY=${DD_API_KEY}
            - DD_SITE=ap2.datadoghq.com
            - DD_LOGS_ENABLED=true
            - DD_APM_ENABLED=true
            - DD_APM_NON_LOCAL_TRAFFIC=true
            - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
            - DD_CONTAINER_EXCLUDE="name:datadog-agent"
            - DD_PROCESS_AGENT_ENABLED=true
            - DD_PROCESS_CONFIG_CONTAINER_COLLECTION_ENABLED=true
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /proc/:/host/proc/:ro
            - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
